# -*- coding: utf-8 -*-
"""Time Series Forecasting with XGBoost DMatrix

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N4zeew4H7F0FA-rsxXqyyItkvAZ7tux-
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'store-sales-time-series-forecasting:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-competitions-data%2Fkaggle-v2%2F29781%2F2887556%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240508%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240508T032934Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D35d079bbca2cbb3ffb767f01ae66dce94becf96dde2dfdc9c75b514ae8305783b92d30aaecb72a53b3cbf91564a73b2b601016fc61fa8e21fd63917bb1a574a170348685f3b180468db172885d4970c3f125820e92b5818c917acc8f1b18614d16464a7fb3b86f81f0dac77c5e77d0d942d6b6739768ed9da70ce581362ca1f82e916a853c3efa3e7baab07fe417ee1edf3bc98e1ae14ff9887cf7d025b1028ce07c4898b3904baff653ee4e08c465f4b32f5ab3e59d977108efd109cfe11216c70f22ce77dfe0edd6c06088521155ba42cd86fefd7fcdbf7a9218ed15420b0a9277c8a5fea2f84bf2108d8331d5a51b473a1793151c27b8c7dd45d76bc8a87e'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")

# load in datasets

holidaysdf = pd.read_csv('/kaggle/input/store-sales-time-series-forecasting/holidays_events.csv')
oildf = pd.read_csv('/kaggle/input/store-sales-time-series-forecasting/oil.csv')
sampledf = pd.read_csv('/kaggle/input/store-sales-time-series-forecasting/sample_submission.csv')
storesdf = pd.read_csv('/kaggle/input/store-sales-time-series-forecasting/stores.csv')
testdf = pd.read_csv('/kaggle/input/store-sales-time-series-forecasting/test.csv')
traindf = pd.read_csv('/kaggle/input/store-sales-time-series-forecasting/train.csv')
transactionsdf = pd.read_csv('/kaggle/input/store-sales-time-series-forecasting/transactions.csv')

storesdf['store_nbr'].unique()

"""# 1. EDA to Understand Dataset"""



# look at holidays dataset

holidaysdf.head()

# drop holidays that were transferred and those that aren't national holidays

holidaysdf = holidaysdf[holidaysdf.transferred != True]
holidaysdf = holidaysdf[holidaysdf.locale == 'National']

holidaysdf = holidaysdf.drop(columns=['type', 'locale', 'locale_name', 'transferred'])

# merge national holidays with merge3 to create df for EDA

merge4 = pd.merge(merge3, holidaysdf, on='date', how='left')
merge4.rename(columns={'description' : 'holiday'}, inplace=True)

df = merge4
df.head()

# review new df

df.info()
df.describe().apply(lambda s: s.apply('{0:.2f}'.format))

# check for null values

df.isnull().sum()

# fill null oil price values with interpolate method, and all others back/forward fill

def oil_nulls(x):
    if x.notnull().sum() > 1:
        return x.interpolate().ffill().bfill()
    else:
        return x.ffill().bfill()

df['dcoilwtico'] = oil_nulls(df['dcoilwtico'])
df.isnull().sum()

# write a function to create new columns for year, month, day, and day name

def date_features(x):
    x['date'] = pd.to_datetime(x['date'])

    x['year'] = x['date'].dt.year
    x['month'] = x['date'].dt.month
    x['day'] = x['date'].dt.day
    x['day_name'] = x['date'].dt.day_name()
    return x

df = date_features(df)
df.head()

# let's take a sample of our data so that EDA goes more smoothly

df1 = df.sample(n=300000).reset_index()

# checking scatter plot for outliers

ax = sns.scatterplot(data=df1, x='date', y='sales')
ax.set_title('Sales')
plt.show()

df1.describe()

# getting rid of outliers in original df

for i in range(1,len(df.store_nbr.unique())+1):
    val = df[df.store_nbr == i].sales.quantile(0.99)
    df = df.drop(df[(df.store_nbr==i) & (df.sales > val)].index)

# checking scatter plot for outliers again

df1 = df.sample(n=300000).reset_index()

ax = sns.scatterplot(data=df1, x='date', y='sales')
ax.set_title('Sales')
plt.show()

df_lain = df1[['month','sales']]
df_lain.head()

df1[df1['sales']==997.441]

df_lain[df_lain['month']==1].mean()

"""Rata2"""

# viewing sales data

order = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

sns.set_palette('hls')
fig, axs = plt.subplots(2, 2, figsize=(20,10))

sns.barplot(x='year', y='sales', data=df1, ax=axs[0,0])
sns.barplot(x='month', y='sales', data=df1, ax=axs[0,1])
sns.barplot(x='day', y='sales', data=df1, ax=axs[1,0])
sns.barplot(x='day_name', y='sales', data=df1, ax=axs[1,1], order=order)

axs[0,0].set_title('by Year')
axs[0,1].set_title('by Month')
axs[1,0].set_title('by Day')
axs[1,1].set_title('by Day of Week')
plt.show()

"""#### Observations:

1. Sales have been steadily increasing from 2013 to 2017
2. Sales are higher in December
3. Sales are higher towards the beginning of the  month
4. Sales are higher on weekends

We will use this information for feature engineering later
"""

# let's see the effect promotions and oil prices have on sales

fig, axs = plt.subplots(1, 2, figsize=(20,7))

sns.scatterplot(data=df1, x='onpromotion', y='sales', ax=axs[0])
ax = sns.scatterplot(data=df1, x='dcoilwtico', y='sales', ax=axs[1])

axs[0].set_title('Promotions vs Sales')
axs[1].set_title('Oil Price vs Sales')

plt.tight_layout()
plt.show()

"""... not much"""

# let's see which cities are selling the most

fig, axs = plt.subplots(1, 2, figsize=(20,10))

sns.barplot(x='sales', y='city', data=df1.groupby('city')['sales'].sum().reset_index().sort_values('sales', ascending = False), ax=axs[0])
sns.barplot(x='sales', y='state', data=df1.groupby('state')['sales'].sum().reset_index().sort_values('sales', ascending = False), ax=axs[1])

axs[0].set_title('Sales by City')
axs[1].set_title('Sales by State')

plt.tight_layout()
plt.show()

# let's check out the product families and see if we can consolidate them a bit

np.sort(df.family.unique())

# how is the product family

# first evaluate by sum of sales

familypivot = pd.DataFrame()
familypivot = df.groupby(by='family')['sales'].sum().sort_values(ascending=False).reset_index()
familypivot.head()

# then evaluate by percentage of sales

total = familypivot['sales'].sum()
familypivot['percentage']=(familypivot['sales']/total)

familypivot.head()

# visualize sales by the raw dollar amount and as a percentage of total sales

fig, axs = plt.subplots(1, 2, figsize=(20,10))

sns.barplot(data=familypivot, x='sales', y='family', ax=axs[0])
sns.barplot(data=familypivot, x='percentage', y='family', ax=axs[1])

axs[0].set_title('Sales by Product Type (Dollar Amount)')
axs[1].set_title('Sales by Product Type (Percentage of Total Sales)')

plt.tight_layout()
plt.show()

ax = sns.scatterplot(data=familypivot, x='sales', y='percentage')
ax.set_title('Total Sales vs Percentage of Total Sales')

plt.show()

family_map       = {'AUTOMOTIVE': 'rest',
                   'BABY CARE': 'rest',
                   'BEAUTY': 'rest',
                   'BOOKS': 'rest',
                   'CELEBRATION': 'rest',
                   'GROCERY II': 'rest',
                   'HARDWARE': 'rest',
                   'HOME AND KITCHEN I': 'rest',
                   'HOME AND KITCHEN II': 'rest',
                   'HOME APPLIANCES': 'rest',
                   'LADIESWEAR': 'rest',
                   'LAWN AND GARDEN': 'rest',
                   'LINGERIE': 'rest',
                   'MAGAZINES': 'rest',
                   'PET SUPPLIES': 'rest',
                   'PLAYERS AND ELECTRONICS': 'rest',
                   'SCHOOL AND OFFICE SUPPLIES': 'rest',
                   'SEAFOOD': 'rest',
                   'DELI': 'fifth',
                    'EGGS': 'sixth',
                    'FROZEN FOODS': 'sixth',
                    'HOME CARE': 'sixth',
                    'LIQUOR,WINE,BEER': 'sixth',
                    'PREPARED FOODS': 'sixth',
                    'PERSONAL CARE': 'fifth',
                    'BREAD/BAKERY': 'fourth',
                    'MEATS': 'fifth',
                    'POULTRY': 'third',
                    'CLEANING':'third',
                    'DAIRY':'fourth',
                    'PRODUCE':'third',
                    'BEVERAGES':'second',
                    'GROCERY I': 'first'
                   }

df['new_family'] = df['family'].map(family_map)
df.head()

# dropping the old family column because we don't need it anymore

df2 = df.drop(columns=['family'])
df2.head()

# replace holiday column values with "yes" if there is a national holiday

def replace_non_null(x):
    x.loc[x['holiday'].notnull(), 'holiday'] = 'yes'
    return x

df2 = replace_non_null(df2)

df2.head()

"""# 2. Predictive Analysis"""

# isolate features into X and target into y

from sklearn.model_selection import train_test_split

X, y = df2.drop('sales', axis=1), df2[['sales']]

# convert non-numerical columns into categorical data type

cats = X.select_dtypes(exclude=np.number).columns.tolist()

for col in cats:
    X[col] = X[col].astype('category')

X.dtypes

# split data into test and train sets

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

# create regression matrices


import xgboost as xgb

dtrain_reg = xgb.DMatrix(X_train, y_train, enable_categorical=True)
dtest_reg = xgb.DMatrix(X_test, y_test, enable_categorical=True)

# generating predictions and testing model

from sklearn.metrics import mean_squared_log_error

params = {"objective": "reg:squarederror"}
evals = [(dtrain_reg, "train"), (dtest_reg, "validation")]
n = 5000

model = xgb.train(
   params=params,
   dtrain=dtrain_reg,
   num_boost_round=n,
   evals=evals,
   verbose_eval=250, # every 250 rounds
   early_stopping_rounds=50 # stop the training if validation loss doesn't improve for 50 consecutive rounds
)

preds = model.predict(dtest_reg)

y_test_non_negative = np.maximum(y_test, 0)
preds_non_negative = np.maximum(preds, 0)

rmsle = np.sqrt(mean_squared_log_error(y_test_non_negative, preds_non_negative))
print(f'RMSLE: {rmsle}')

# generating predictions and testing model

from sklearn.metrics import mean_squared_log_error

params = {"objective": "reg:squarederror"}
evals = [(dtrain_reg, "train"), (dtest_reg, "validation")]
n = 5000

model = xgb.train(
   params=params,
   dtrain=dtrain_reg,
   num_boost_round=n,
   evals=evals,
   verbose_eval=250, # every 250 rounds
   early_stopping_rounds=50 # stop the training if validation loss doesn't improve for 50 consecutive rounds
)

preds = model.predict(dtest_reg)

y_test_non_negative = np.maximum(y_test, 0)
preds_non_negative = np.maximum(preds, 0)

rmsle = np.sqrt(mean_squared_log_error(y_test_non_negative, preds_non_negative))
print(f'RMSLE: {rmsle}')

print(rmse)

testdf.head()

# prepare test df for evaluation

merge1 = pd.merge(testdf, oildf, on='date', how='left')
merge2 = pd.merge(merge1, transactionsdf, on=['date', 'store_nbr'], how='left')
merge3 = pd.merge(merge2, storesdf, on='store_nbr', how='left')

merge4 = pd.merge(merge3, holidaysdf, on='date', how='left')
merge4.rename(columns={'description' : 'holiday'}, inplace=True)

testdf1 = merge4

# adding oil prices and date features

testdf1['dcoilwtico'] = oil_nulls(testdf1['dcoilwtico'])
testdf1 = date_features(testdf1)


# replace family

testdf1['new_family'] = testdf1['family'].map(family_map)
testdf1 = testdf1.drop(columns=['family'])

# replace holidays with yes or null

testdf1 = replace_non_null(testdf1)

testdf1.head()

# convert non-numerical columns into categorical data type

cats = testdf1.select_dtypes(exclude=np.number).columns.tolist()

for col in cats:
    testdf1[col] = testdf1[col].astype('category')

# run again on test df

testdf1_matrix = xgb.DMatrix(testdf1, enable_categorical=True)
predictions = model.predict(testdf1_matrix)
testdf1['sales'] = predictions

# change any negative predictions to zero

testdf1['sales'] = testdf1['sales'].clip(lower=0)

# drop all columns not needed in submission

testdf1_fix = testdf1.drop(columns=['date', 'store_nbr', 'onpromotion', 'dcoilwtico', 'transactions',
       'city', 'state', 'type', 'cluster', 'holiday', 'year', 'month', 'day',
       'day_name', 'new_family'])

testdf1_fix.head()

testdf1_fix.to_csv('submission.csv', index=False)

df_result = df2.groupby('date', as_index = False )['sales'].sum()
df_result

import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['date']
  ys = series['sales']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = df_result.sort_values('date', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('date')
_ = plt.ylabel('sales')

df_result2 = testdf1.groupby('date', as_index = False )['sales'].sum()
df_result2

import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['date']
  ys = series['sales']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = df_result2.sort_values('date', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('date')
_ = plt.ylabel('sales')

df_total = pd.concat([df_result,df_result2])
df_total.head()

df_total.tail()

import matplotlib.dates as mdates
# Assuming df_result and df_result2 are already defined and have 'date' and 'sales' columns
df_total = pd.concat([df_result, df_result2])

# Create the time series plot
fig, ax = plt.subplots(figsize=(24,6))

# Plot df_result
ax.plot(df_result['date'], df_result['sales'], color='blue', label='Existed Data')

# Plot df_result2 with a different color
ax.plot(df_result2['date'], df_result2['sales'], color='red', label='Predicted Data')

# Set major ticks format
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b,%Y'))

# Set the locator to place a tick on each month
ax.xaxis.set_major_locator(mdates.MonthLocator(interval=3))  # interval=1 ensures a tick every month

# Rotate the date labels for better readability
plt.xticks(rotation=45)

# Add labels and title
plt.xlabel('Date')
plt.ylabel('Sales')
plt.title('Sales Time Series ')

# Add grid, legend, and show the plot
plt.grid(True)
plt.legend()
plt.show()